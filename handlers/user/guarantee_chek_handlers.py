import asyncio
import os
import uuid
from docx2pdf import convert

from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile
from aiogram.types import Message
from docxtpl import DocxTemplate
from loguru import logger

from database.database import entry_into_the_database_to_fill_out_a_warranty_card
from keyboards.keyboards import guarantee_chek_keyboard, filled_data_keyboard, contact_details_to_choose_from
from system.dispatcher import ADMIN_USER_ID
from system.dispatcher import bot, dp, router
from system.working_with_files import load_bot_info
from system.working_with_files import save_bot_info


class FormeditGuaranteeChek(StatesGroup):
    text_edit_guarantee_chek = State()


@router.message(Command("edit_guarantee_chek"))
async def edit_guarantee_chek(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_guarantee_chek (–•–æ—á—É –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Ç–∞–ª–æ–Ω)"""
    try:
        if message.from_user.id not in ADMIN_USER_ID:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–º–µ—Ç–∫—É HTML.")
        await state.set_state(FormeditGuaranteeChek.text_edit_guarantee_chek)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.message(FormeditGuaranteeChek.text_edit_guarantee_chek)
async def update_info(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)"""
    try:
        text = message.html_text
        bot_info = text
        save_bot_info(bot_info, file_path="messages/guarantee_chek_messages.json")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON
        await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data == "guarantee_chek")
async def guarantee_chek_handlers(callback_query: types.CallbackQuery) -> None:
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ —Ç–∞–ª–æ–Ω–∞"""
    try:
        user_id = callback_query.from_user.id

        user_name = callback_query.from_user.username
        if callback_query.from_user.username is None:
            user_name = ''  # –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ None

        user_first_name = callback_query.from_user.first_name
        user_last_name = callback_query.from_user.last_name
        logger.info(f"{user_id} {user_name} {user_first_name} {user_last_name}")

        await bot.send_message(callback_query.from_user.id,
                               load_bot_info(messages="messages/guarantee_chek_messages.json"),
                               reply_markup=guarantee_chek_keyboard(),
                               disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


class EnteringCustomerData(StatesGroup):  # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    product_code = State()  # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
    order_number = State()  # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    product_photo = State()  # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
    FULL_NAME = State()  # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    phone_number = State()  # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    mail = State()  # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ E-mail –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    telegram = State()  # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    tipe_shop = State()  # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¢–∏–ø –º–∞–≥–∞–∑–∏–Ω–∞
    date_of_purchase = State()  # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏
    communication_method = State()  # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
    short_code = State()  # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥


@router.callback_query(F.data == "WILBEREES")
async def WILBEREES_handlers(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    try:
        tipe_shop = 'WILBEREES'
        logger.info(tipe_shop)
        await state.update_data(tipe_shop=tipe_shop)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        short_code = str(uuid.uuid4())[:8]  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∫–æ–¥–∞ –¥–ª–∏–Ω–æ–π 8 —Å–∏–º–≤–æ–ª–æ–≤
        logger.info(short_code)
        await state.update_data(short_code=short_code)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥

        sign_up_text = "üõí –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:"
        await bot.send_message(callback_query.from_user.id, sign_up_text, disable_web_page_preview=True)
        await state.set_state(EnteringCustomerData.product_code)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data == "OZON")
async def OZON_handlers(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    try:
        tipe_shop = 'OZON'
        logger.info(tipe_shop)
        await state.update_data(tipe_shop=tipe_shop)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        short_code = str(uuid.uuid4())[:8]  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∫–æ–¥–∞ –¥–ª–∏–Ω–æ–π 8 —Å–∏–º–≤–æ–ª–æ–≤
        logger.info(short_code)
        await state.update_data(short_code=short_code)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥

        sign_up_text = "üõí –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:"
        await bot.send_message(callback_query.from_user.id, sign_up_text, disable_web_page_preview=True)
        await state.set_state(EnteringCustomerData.product_code)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data == "retail_store")
async def retail_store_handlers(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    try:
        tipe_shop = '–†–æ–∑–Ω–∏—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω'
        logger.info(tipe_shop)
        await state.update_data(tipe_shop=tipe_shop)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        short_code = str(uuid.uuid4())[:8]  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∫–æ–¥–∞ –¥–ª–∏–Ω–æ–π 8 —Å–∏–º–≤–æ–ª–æ–≤
        logger.info(short_code)
        await state.update_data(short_code=short_code)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥

        sign_up_text = "üõí –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:"
        await bot.send_message(callback_query.from_user.id, sign_up_text, disable_web_page_preview=True)
        await state.set_state(EnteringCustomerData.product_code)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data == "Exhibition")
async def Exhibition_handlers(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    try:
        tipe_shop = '–í—ã—Å—Ç–∞–≤–∫–∞'
        logger.info(tipe_shop)
        await state.update_data(tipe_shop=tipe_shop)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        short_code = str(uuid.uuid4())[:8]  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∫–æ–¥–∞ –¥–ª–∏–Ω–æ–π 8 —Å–∏–º–≤–æ–ª–æ–≤
        logger.info(short_code)
        await state.update_data(short_code=short_code)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥

        sign_up_text = "üõí –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:"
        await bot.send_message(callback_query.from_user.id, sign_up_text, disable_web_page_preview=True)
        await state.set_state(EnteringCustomerData.product_code)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data == "Other")
async def Other_handlers(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    try:
        short_code = str(uuid.uuid4())[:8]  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∫–æ–¥–∞ –¥–ª–∏–Ω–æ–π 8 —Å–∏–º–≤–æ–ª–æ–≤
        logger.info(short_code)
        await state.update_data(short_code=short_code)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥

        sign_up_text = "üõí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø–æ–∫—É–ø–∫–∏:"
        await bot.send_message(callback_query.from_user.id, sign_up_text, disable_web_page_preview=True)
        await state.set_state(EnteringCustomerData.tipe_shop)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.message(EnteringCustomerData.tipe_shop)
async def Other_handlers(message: Message, state: FSMContext) -> None:
    try:
        custom_shop_type = message.html_text
        logger.info(custom_shop_type)
        await state.update_data(tipe_shop=custom_shop_type)  # Save the custom shop type

        sign_up_text = "üõí –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:"
        await bot.send_message(message.from_user.id, sign_up_text, disable_web_page_preview=True)
        await state.set_state(EnteringCustomerData.product_code)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.message(EnteringCustomerData.product_code)
async def product_code(message: Message, state: FSMContext):
    try:
        text = message.html_text
        logger.info(text)
        await state.update_data(product_code=text)  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        sign_up_text = "üõí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞:"
        await bot.send_message(message.from_user.id, sign_up_text, disable_web_page_preview=True)
        await state.set_state(EnteringCustomerData.order_number)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.message(EnteringCustomerData.order_number)
async def order_number(message: Message, state: FSMContext):
    try:
        text = message.html_text
        logger.info(text)
        await state.update_data(order_number=text)  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        sign_up_text = "üõí –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:"
        await bot.send_message(message.from_user.id, sign_up_text, disable_web_page_preview=True)
        await state.set_state(EnteringCustomerData.product_photo)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.message(EnteringCustomerData.product_photo, F.photo)
async def product_photos(message: Message, state: FSMContext):
    try:
        text = message.html_text
        logger.info(text)
        await state.update_data(product_photo=text)  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        data = await state.get_data()
        short_code = data.get('short_code')
        logger.info(f'–ò–º—è –¥–ª—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞: {short_code}')

        photo = message.photo[-1]
        file_info = await message.bot.get_file(photo.file_id)
        new_photo_path = os.path.join("product_photo", f'{short_code}.jpg')
        await message.bot.download_file(file_info.file_path, new_photo_path)

        sign_up_text = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ (–§.–ò.–û.):"
        await bot.send_message(message.from_user.id, sign_up_text, disable_web_page_preview=True)
        await state.set_state(EnteringCustomerData.FULL_NAME)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.message(EnteringCustomerData.FULL_NAME)
async def product_photos(message: Message, state: FSMContext):
    try:
        text = message.html_text
        logger.info(text)
        await state.update_data(FULL_NAME=text)  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        sign_up_text = "üõí –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏:"
        await bot.send_message(message.from_user.id, sign_up_text, disable_web_page_preview=True)
        await state.set_state(EnteringCustomerData.date_of_purchase)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.message(EnteringCustomerData.date_of_purchase)
async def FULL_NAME(message: Message, state: FSMContext):
    try:
        text = message.html_text
        logger.info(text)
        await state.update_data(date_of_purchase=text)  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        sign_up_text = "–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:"
        await bot.send_message(message.from_user.id, sign_up_text, disable_web_page_preview=True,
                               reply_markup=contact_details_to_choose_from())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data == "telephone")
async def guarantee_chek_handlers(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    try:
        communication_method = '–¢–µ–ª–µ—Ñ–æ–Ω'
        logger.info(communication_method)
        await state.update_data(communication_method=communication_method)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        sign_up_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+***)"
        await bot.send_message(callback_query.from_user.id, sign_up_text)
        await state.set_state(EnteringCustomerData.phone_number)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data == "mail")
async def guarantee_chek_handlers(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    try:
        communication_method = '–ü–æ—á—Ç–∞'
        logger.info(communication_method)
        await state.update_data(communication_method=communication_method)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        sign_up_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä email"
        await bot.send_message(callback_query.from_user.id, sign_up_text)
        await state.set_state(EnteringCustomerData.mail)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data == "telegram")
async def guarantee_chek_handlers(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    try:
        communication_method = '–¢–µ–ª–µ–≥—Ä–∞–º'
        logger.info(communication_method)
        await state.update_data(communication_method=communication_method)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        sign_up_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ telegram (@***)"
        await bot.send_message(callback_query.from_user.id, sign_up_text)
        await state.set_state(EnteringCustomerData.telegram)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.message(EnteringCustomerData.phone_number)
async def phone_number(message: Message, state: FSMContext):
    try:
        contact = message.html_text
        logger.info(contact)
        await state.update_data(phone_number=contact)  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        product_code = data.get('product_code')
        order_number = data.get('order_number')
        full_name = data.get('FULL_NAME')
        tipe_shop = data.get('tipe_shop')
        date_of_purchase = data.get('date_of_purchase')
        communication_method = data.get('communication_method')
        short_code = data.get('short_code')
        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–π —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        response_message = (f"ü§ñ –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!\n\n"
    
                            f"–ù–æ–º–µ—Ä –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ —Ç–∞–ª–æ–Ω–∞: {short_code}\n"  # –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
                            )

        user_name = message.from_user.username
        if message.from_user.username is None:
            user_name = ''  # –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ None

        entry_into_the_database_to_fill_out_a_warranty_card(message.from_user.id, user_name, product_code,
                                                            order_number, short_code,
                                                            full_name, contact, communication_method, date_of_purchase,
                                                            tipe_shop, short_code)
        file_dog = f'form/–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π_—Ç–∞–ª–æ–Ω.docx'

        filling_data_hourly_rate(file_dog, product_code, full_name, date_of_purchase, communication_method, contact,
                                 short_code, f'completed_form/–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π_—Ç–∞–ª–æ–Ω_{short_code}.docx', '1 –≥–æ–¥')
        await state.clear()
        doc2pdf_libreoffice(f'completed_form/–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π_—Ç–∞–ª–æ–Ω_{short_code}.docx', f'completed_form/–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π_—Ç–∞–ª–æ–Ω_{short_code}.pdf')
        await asyncio.sleep(2)
        file = FSInputFile(f'completed_form/–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π_—Ç–∞–ª–æ–Ω_{short_code}.pdf')
        await bot.send_document(message.from_user.id, document=file, caption=response_message,
                                parse_mode="HTML", reply_markup=filled_data_keyboard())  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.message(EnteringCustomerData.mail)
async def mail(message: Message, state: FSMContext):
    try:
        contact = message.html_text
        logger.info(contact)
        await state.update_data(phone_number=contact)  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        product_code = data.get('product_code')
        order_number = data.get('order_number')
        full_name = data.get('FULL_NAME')
        tipe_shop = data.get('tipe_shop')
        date_of_purchase = data.get('date_of_purchase')
        communication_method = data.get('communication_method')
        short_code = data.get('short_code')
        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–π —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        response_message = (f"ü§ñ –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!\n\n"
    
                            f"–ù–æ–º–µ—Ä –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ —Ç–∞–ª–æ–Ω–∞: {short_code}\n"  # –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
                            )

        user_name = message.from_user.username
        if message.from_user.username is None:
            user_name = ''   # –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ None

        entry_into_the_database_to_fill_out_a_warranty_card(message.from_user.id, user_name, product_code,
                                                            order_number, short_code,
                                                            full_name, contact, communication_method, date_of_purchase,
                                                            tipe_shop, short_code)
        file_dog = f'form/–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π_—Ç–∞–ª–æ–Ω.docx'

        filling_data_hourly_rate(file_dog, product_code, full_name, date_of_purchase, communication_method, contact,
                                 short_code, f'completed_form/–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π_—Ç–∞–ª–æ–Ω_{short_code}.docx', '1 –≥–æ–¥')
        await state.clear()
        doc2pdf_libreoffice(f'completed_form/–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π_—Ç–∞–ª–æ–Ω_{short_code}.docx', f'completed_form/–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π_—Ç–∞–ª–æ–Ω_{short_code}.pdf')
        await asyncio.sleep(2)
        file = FSInputFile(f'completed_form/–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π_—Ç–∞–ª–æ–Ω_{short_code}.pdf')
        await bot.send_document(message.from_user.id, document=file, caption=response_message,
                                parse_mode="HTML", reply_markup=filled_data_keyboard())  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


@router.message(EnteringCustomerData.telegram)
async def mail(message: Message, state: FSMContext):
    try:
        contact = message.html_text
        logger.info(contact)
        await state.update_data(phone_number=contact)  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        product_code = data.get('product_code')
        order_number = data.get('order_number')
        full_name = data.get('FULL_NAME')
        tipe_shop = data.get('tipe_shop')
        date_of_purchase = data.get('date_of_purchase')
        communication_method = data.get('communication_method')
        short_code = data.get('short_code')
        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–π —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        response_message = (f"ü§ñ –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!\n\n"
    
                            f"–ù–æ–º–µ—Ä –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ —Ç–∞–ª–æ–Ω–∞: {short_code}\n"  # –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
                            )

        user_name = message.from_user.username
        if message.from_user.username is None:
            user_name = ''  # –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ None

        entry_into_the_database_to_fill_out_a_warranty_card(message.from_user.id, user_name, product_code,
                                                            order_number, short_code, full_name, contact,
                                                            communication_method,
                                                            date_of_purchase, tipe_shop, short_code)
        file_dog = f'form/–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π_—Ç–∞–ª–æ–Ω.docx'

        filling_data_hourly_rate(file_dog, product_code, full_name, date_of_purchase, communication_method, contact,
                                 short_code, f'completed_form/–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π_—Ç–∞–ª–æ–Ω_{short_code}.docx', '1 –≥–æ–¥')
        await state.clear()
        doc2pdf_libreoffice(f'completed_form/–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π_—Ç–∞–ª–æ–Ω_{short_code}.docx', f'completed_form/–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π_—Ç–∞–ª–æ–Ω_{short_code}.pdf')
        await asyncio.sleep(2)
        file = FSInputFile(f'completed_form/–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π_—Ç–∞–ª–æ–Ω_{short_code}.pdf')
        await bot.send_document(message.from_user.id, document=file, caption=response_message,
                                parse_mode="HTML", reply_markup=filled_data_keyboard())  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


def doc2pdf_libreoffice(input_docx, output_pdf):
    convert(input_docx, output_pdf)


def filling_data_hourly_rate(file_dog, product_code, full_name, date_of_purchase, communication_method, contact,
                             warranty_card_number, files_dog, years):
    try:
        doc = DocxTemplate(file_dog)
        context = {
            'product_code': f"{product_code}",  # –ê—Ä—Ç–∏–∫—É–ª
            'full_name': f"{full_name}",  # –§.–ò.–û. (–ò–≤–∞–Ω–æ–≤ –ò. –ò.)
            'date_of_purchase': f"{date_of_purchase}",  # –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏
            'communication_method': f"{communication_method}",  # –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏
            'contact': f"{contact}",  # –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏
            'warranty_card_number': f"{warranty_card_number}",  # –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –¢–∞–ª–æ–Ω ‚Ññ
            'years': f"{years}",
        }
        doc.render(context)
        doc.save(files_dog)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


def register_guarantee_chek_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞"""
    dp.message.register(guarantee_chek_handlers)
    dp.message.register(WILBEREES_handlers)
    dp.message.register(OZON_handlers)
    dp.message.register(retail_store_handlers)
    dp.message.register(Exhibition_handlers)
    dp.message.register(Other_handlers)
    dp.message.register(edit_guarantee_chek)
